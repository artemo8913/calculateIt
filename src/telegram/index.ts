import { Bot, Context } from "grammy";

import { BOT_STARTUP_COMMANDS, BOT_START, BOT_GET_ACCOUNTS } from "./commands";
import { accounts } from "./accounts";
import { BOT_TEXT } from "./text";
import { mainMenu } from "./menus";
import { Conversation, ConversationFlavor, conversations, createConversation } from "@grammyjs/conversations";

export function createBot(token: string) {
    const bot = new Bot<ConversationFlavor<Context>>(token);

    bot.api.setMyCommands(BOT_STARTUP_COMMANDS);

    /** –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ */
    async function hello(conversation: Conversation, ctx: Context) {
        await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
        const { message } = await conversation.waitFor("message:text");
        await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, ${message.text}!`);
    }


    bot.use(conversations());
    bot.use(mainMenu);
    bot.use(accounts);
    bot.use(createConversation(hello));

    bot.command("enter", async (ctx) => {
        // –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é "hello", –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–±—ä—è–≤–∏–ª–∏.
        await ctx.conversation.enter("hello");
    });

    bot.command(BOT_START.command, async (ctx) => {
        const message_id = ctx.message?.message_id;

        let reply_parameters;

        if (message_id) {
            reply_parameters = { message_id };
        }

        await ctx.reply("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —ç—Ç–æ –º–µ–Ω—é:", { reply_markup: mainMenu });

        await ctx.reply(BOT_TEXT.greeting + " " + `id = ${ctx.message?.chat.id}`, { reply_parameters });
    });

    bot.on("edited_message", async (ctx) => {
        // –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        const editedText = ctx.editedMessage.text;

        await ctx.reply(`${ctx.editedMessage.message_id} ${editedText}`);
    });

    bot.on("message:text", async (ctx) => {
        await ctx.reply("–ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: " + "ctx.msg.from.id", { parse_mode: "HTML" });
        await ctx.replyWithDice("üé≤");
    });

    bot.on("message:entities", async (ctx) => {
        // –ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏.
        const entities = ctx.entities();
        console.log(entities);
        // –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏.
        entities[0].text;

        // –ü–æ–ª—É—á–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π
        const emails = ctx.entities("email");

        // –ü–æ–ª—É—á–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π –∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const phonesAndEmails = ctx.entities(["email", "phone_number"]);

        await ctx.reply(`${phonesAndEmails.join(",")}`)

    });

    bot.on("message_reaction", async (ctx) => {
        console.log("message_reaction");
        const { emojiAdded } = ctx.reactions();
        if (emojiAdded.includes("üëç")) {
            await ctx.reply("–≤–µ—á–µ—Ä–∏–Ω–û—á–∫–∞ :D");
        }
    });

    return bot;
}
